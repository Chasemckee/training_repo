/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGD


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException,
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_kovan(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_kovan(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}


	#include "battery.hpp"
	#include "button.hpp"
	#include "servo.hpp"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT float D_Battery_powerLevel() {
  float jresult ;
  float result;
  
  result = (float)Battery::powerLevel();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Battery() {
  void * jresult ;
  Battery *result = 0 ;
  
  result = (Battery *)new Battery();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Battery(void * jarg1) {
  Battery *arg1 = (Battery *) 0 ;
  
  arg1 = (Battery *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_delete_AbstractButton(void * jarg1) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  
  arg1 = (AbstractButton *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_AbstractButton_setText(void * jarg1, char * jarg2) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (AbstractButton *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->setText((char const *)arg2);
}


SWIGEXPORT char * D_AbstractButton_text(void * jarg1) {
  char * jresult ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  char *result = 0 ;
  
  arg1 = (AbstractButton *)jarg1;
  result = (char *)((AbstractButton const *)arg1)->text();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_AbstractButton_isTextDirty(void * jarg1) {
  unsigned int jresult ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool result;
  
  arg1 = (AbstractButton *)jarg1;
  result = (bool)((AbstractButton const *)arg1)->isTextDirty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_AbstractButton_setPressed(void * jarg1, unsigned int jarg2) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool arg2 ;
  
  arg1 = (AbstractButton *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setPressed(arg2);
}


SWIGEXPORT unsigned int D_AbstractButton_isPressed(void * jarg1) {
  unsigned int jresult ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool result;
  
  arg1 = (AbstractButton *)jarg1;
  result = (bool)((AbstractButton const *)arg1)->isPressed();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_AbstractButton_isNotPressed(void * jarg1) {
  unsigned int jresult ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool result;
  
  arg1 = (AbstractButton *)jarg1;
  result = (bool)((AbstractButton const *)arg1)->isNotPressed();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_AButton_setText(void * jarg1, char * jarg2) {
  AButton *arg1 = (AButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (AButton *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->setText((char const *)arg2);
}


SWIGEXPORT char * D_AButton_text(void * jarg1) {
  char * jresult ;
  AButton *arg1 = (AButton *) 0 ;
  char *result = 0 ;
  
  arg1 = (AButton *)jarg1;
  result = (char *)((AButton const *)arg1)->text();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_AButton_isTextDirty(void * jarg1) {
  unsigned int jresult ;
  AButton *arg1 = (AButton *) 0 ;
  bool result;
  
  arg1 = (AButton *)jarg1;
  result = (bool)((AButton const *)arg1)->isTextDirty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_AButton_setPressed(void * jarg1, unsigned int jarg2) {
  AButton *arg1 = (AButton *) 0 ;
  bool arg2 ;
  
  arg1 = (AButton *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setPressed(arg2);
}


SWIGEXPORT unsigned int D_AButton_isPressed(void * jarg1) {
  unsigned int jresult ;
  AButton *arg1 = (AButton *) 0 ;
  bool result;
  
  arg1 = (AButton *)jarg1;
  result = (bool)((AButton const *)arg1)->isPressed();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_AButton() {
  void * jresult ;
  AButton *result = 0 ;
  
  result = (AButton *)new AButton();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_AButton(void * jarg1) {
  AButton *arg1 = (AButton *) 0 ;
  
  arg1 = (AButton *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_BButton_setText(void * jarg1, char * jarg2) {
  BButton *arg1 = (BButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (BButton *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->setText((char const *)arg2);
}


SWIGEXPORT char * D_BButton_text(void * jarg1) {
  char * jresult ;
  BButton *arg1 = (BButton *) 0 ;
  char *result = 0 ;
  
  arg1 = (BButton *)jarg1;
  result = (char *)((BButton const *)arg1)->text();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_BButton_isTextDirty(void * jarg1) {
  unsigned int jresult ;
  BButton *arg1 = (BButton *) 0 ;
  bool result;
  
  arg1 = (BButton *)jarg1;
  result = (bool)((BButton const *)arg1)->isTextDirty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BButton_setPressed(void * jarg1, unsigned int jarg2) {
  BButton *arg1 = (BButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BButton *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setPressed(arg2);
}


SWIGEXPORT unsigned int D_BButton_isPressed(void * jarg1) {
  unsigned int jresult ;
  BButton *arg1 = (BButton *) 0 ;
  bool result;
  
  arg1 = (BButton *)jarg1;
  result = (bool)((BButton const *)arg1)->isPressed();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_BButton() {
  void * jresult ;
  BButton *result = 0 ;
  
  result = (BButton *)new BButton();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_BButton(void * jarg1) {
  BButton *arg1 = (BButton *) 0 ;
  
  arg1 = (BButton *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_ZButton_setText(void * jarg1, char * jarg2) {
  ZButton *arg1 = (ZButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ZButton *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->setText((char const *)arg2);
}


SWIGEXPORT char * D_ZButton_text(void * jarg1) {
  char * jresult ;
  ZButton *arg1 = (ZButton *) 0 ;
  char *result = 0 ;
  
  arg1 = (ZButton *)jarg1;
  result = (char *)((ZButton const *)arg1)->text();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_ZButton_isTextDirty(void * jarg1) {
  unsigned int jresult ;
  ZButton *arg1 = (ZButton *) 0 ;
  bool result;
  
  arg1 = (ZButton *)jarg1;
  result = (bool)((ZButton const *)arg1)->isTextDirty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ZButton_setPressed(void * jarg1, unsigned int jarg2) {
  ZButton *arg1 = (ZButton *) 0 ;
  bool arg2 ;
  
  arg1 = (ZButton *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setPressed(arg2);
}


SWIGEXPORT unsigned int D_ZButton_isPressed(void * jarg1) {
  unsigned int jresult ;
  ZButton *arg1 = (ZButton *) 0 ;
  bool result;
  
  arg1 = (ZButton *)jarg1;
  result = (bool)((ZButton const *)arg1)->isPressed();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_ZButton() {
  void * jresult ;
  ZButton *result = 0 ;
  
  result = (ZButton *)new ZButton();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ZButton(void * jarg1) {
  ZButton *arg1 = (ZButton *) 0 ;
  
  arg1 = (ZButton *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Servo(void * jarg1) {
  void * jresult ;
  port_t arg1 ;
  port_t *argp1 ;
  Servo *result = 0 ;
  
  argp1 = (port_t *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null port_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (Servo *)new Servo(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Servo_setPosition(void * jarg1, unsigned int jarg2) {
  Servo *arg1 = (Servo *) 0 ;
  Servo::ticks_t arg2 ;
  
  arg1 = (Servo *)jarg1;
  arg2 = (Servo::ticks_t)jarg2;
  (arg1)->setPosition(arg2);
}


SWIGEXPORT unsigned int D_Servo_position(void * jarg1) {
  unsigned int jresult ;
  Servo *arg1 = (Servo *) 0 ;
  Servo::ticks_t result;
  
  arg1 = (Servo *)jarg1;
  result = (Servo::ticks_t)((Servo const *)arg1)->position();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_Servo(void * jarg1) {
  Servo *arg1 = (Servo *) 0 ;
  
  arg1 = (Servo *)jarg1;
  delete arg1;
}


SWIGEXPORT AbstractButton * D_AButton_Upcast(AbstractButton *objectRef) {
    return (AbstractButton *)objectRef;
}

SWIGEXPORT AbstractButton * D_BButton_Upcast(AbstractButton *objectRef) {
    return (AbstractButton *)objectRef;
}

SWIGEXPORT AbstractButton * D_ZButton_Upcast(AbstractButton *objectRef) {
    return (AbstractButton *)objectRef;
}

#ifdef __cplusplus
}
#endif

